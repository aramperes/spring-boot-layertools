name: release
on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Create artifacts directory
        run: mkdir -p artifacts/meta

      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.VERSION }}"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/meta/release-upload-url

      - name: Save version number to artifact
        run: echo "${{ env.VERSION }}" > artifacts/meta/release-version

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: meta
          path: artifacts/meta

  build-release:
    name: build-release
    needs: [ 'create-release' ]
    runs-on: ubuntu-latest
    env:
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install packages (Ubuntu)
        run: |
          sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          target: x86_64-unknown-linux-musl

      - name: Build binary
        run: cargo build --release --target x86_64-unknown-linux-musl
        env:
          RUSTFLAGS: -C link-arg=-s

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p ci/assets
          cp "target/release/spring-boot-layertools" "ci/assets/spring-boot-layertools"
          echo "ASSET=spring-boot-layertools" >> $GITHUB_ENV
          cp Dockerfile "ci/assets/Dockerfile"

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: aramperes/spring-boot-layertools

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: ci/assets
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Get release download URL
        uses: actions/download-artifact@v1
        with:
          name: meta
          path: artifacts/meta

      - name: Set release upload URL
        shell: bash
        run: |
          release_upload_url="$(cat artifacts/meta/release-upload-url)"
          echo "RELEASE_UPLOAD_URL=$release_upload_url" >> $GITHUB_ENV
          echo "release upload url: $release_upload_url"

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.RELEASE_UPLOAD_URL }}
          asset_path: ci/assets/${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
